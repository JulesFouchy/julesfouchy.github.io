{"searchDocs":[{"title":"Golden White Noise","type":0,"sectionRef":"#","url":"/blog/2021/03/19/golden-white-noise","content":"Every person interested in rendering through fragment shaders has already come across a function like this to generate some white noise: float random(vec2 uv) { return fract(sin(dot(uv ,vec2(12.9898,78.233))) * 43758.5453); } And I used it too, until someone pointed out a big problem to me: on her device my artworks were all messed up! And it turned out that many people were actually encountering the same problem. (You can see the artifacts in the comparison at the end) After a bit of investigation I tracked it down to the random function that was not producing reliable results! It turned out that depending on the precision of floats supported by your GPU the results were different. For low precision floats the quality of the distribution gets noticeably degraded. And at this moment I remembered that guy at the bottom of a StackOverflow discussion claiming that his Gold Noise was much better. And guess what, he was right! So thank you Dominic Cerisano for this lovely piece of code! // Gold Noise ¬©2015 dcerisano@standard3d.com // - based on the Golden Ratio // - uniform normalized distribution // - fastest static noise generator function (also runs at low precision) float PHI = 1.61803398874989484820459; // Œ¶ = Golden Ratio float gold_noise(in vec2 xy, in float seed){ return fract(tan(distance(xy*PHI, xy)*seed)*xy.x); } tip Alternatively, you can rely on https://github.com/ashima/webgl-noise for your Perlin / simplex / fractal / etc. noise functions since they don't make use of these pseudorandom number generators. And here is a comparison of the visual results. Gold Noise produces the same (artifact-free) results on all the GPUs I could test with: Classic white noise\tGold NoisePotato GPU Good GPU Links The corresponding StackOverflow discussion A live comparison of the different types of white noise","keywords":"","version":null},{"title":"Complex Sphere","type":0,"sectionRef":"#","url":"/artworks/complex-sphere","content":"Complex Sphere A single fragment shader (available here), rendered using CoolLab. What you see here is a simple sphere, plus two rendering tricks. The main one is inspired by Conformal Geometric Algebra, an alternative way of doing geometry. Geometric Algebra is a theory that generalizes many concepts such as complex numbers, quaternions, dual numbers and many more. It offers a very abstract and powerful way of working with geometric primitives. In particular, 3D Conformal Geometric Algebra is a 32-dimensional vector space where both points, pairs of points, directions, lines, planes, circles and spheres can be natively represented as (32-dimensional) vectors. Using the many products defined on this algebra we can express usual operations very easily. For example we can compute the two intersection points between a ray and a sphere using the so-called outer product between the dual representations of our objects: intersectionPtPair = dual(outer(dualSphere, dual(rayLine))); And note that the two points are represented as a single vector! From there on we can extract the two points from the pair and proceed with our rendering as usual. But now comes the very interesting part: what happens if there is no actual intersection? Well, we then obtain an imaginary point pair (the &quot;dot product&quot; of the vector with itself is negative). But it still represents a pair of points nonetheless! We could check the sign of the &quot;dot product&quot; and discard the negative ones to get a traditional sphere rendering. Or we could consider those imaginary point pairs as valid ones and still render them as if they were part of the sphere! And there you are. This is what I did to get this interesting result outside of the regular sphere, and this is why I called it a complex sphere. The second rendering trick is more mundane. What you see rendered is the normals of the sphere. But to make sure that negative values still appear, I take an absolute value. And finally to get brighter colors I apply a square root, and that's it!","keywords":"","version":"Next"},{"title":"üîµ üíß üå¨Ô∏è","type":0,"sectionRef":"#","url":"/artworks/bd25h2022","content":"üîµ üíß üå¨Ô∏è ‚Üê ‚Üí Made with Coollab In collaboration with Enguerrand de Smet and Aurore Lafaurie","keywords":"","version":"Next"},{"title":"Futuristic Hologram","type":0,"sectionRef":"#","url":"/artworks/futuristic-hologram","content":"Futuristic Hologram A single fragment shader (available here), rendered using CoolLab Made in collaboration with Enguerrand de Smet during a live coding session on the E-Taverne","keywords":"","version":"Next"},{"title":"InkTober 2020","type":0,"sectionRef":"#","url":"/artworks/inktober-2020","content":"","keywords":"","version":"Next"},{"title":"Distortion‚Äã","type":1,"pageTitle":"InkTober 2020","url":"/artworks/inktober-2020#distortion","content":" ","version":"Next","tagName":"h3"},{"title":"Negative‚Äã","type":1,"pageTitle":"InkTober 2020","url":"/artworks/inktober-2020#negative","content":" ","version":"Next","tagName":"h3"},{"title":"Tiles‚Äã","type":1,"pageTitle":"InkTober 2020","url":"/artworks/inktober-2020#tiles","content":" ","version":"Next","tagName":"h3"},{"title":"Vasarely‚Äã","type":1,"pageTitle":"InkTober 2020","url":"/artworks/inktober-2020#vasarely","content":" ","version":"Next","tagName":"h3"},{"title":"Monochromatic‚Äã","type":1,"pageTitle":"InkTober 2020","url":"/artworks/inktober-2020#monochromatic","content":"Click on the canvas And then spam the clicks  ","version":"Next","tagName":"h3"},{"title":"Three‚Äã","type":1,"pageTitle":"InkTober 2020","url":"/artworks/inktober-2020#three","content":" ","version":"Next","tagName":"h3"},{"title":"L-System‚Äã","type":1,"pageTitle":"InkTober 2020","url":"/artworks/inktober-2020#l-system","content":" ","version":"Next","tagName":"h3"},{"title":"Impressionist Painter","type":0,"sectionRef":"#","url":"/artworks/impressionist-painter","content":"Impressionist Painter A Processing script that takes a picture and repaints it in an impressionist style Available here","keywords":"","version":"Next"},{"title":"Frise Gidaire","type":0,"sectionRef":"#","url":"/artworks/frise-gidaire","content":"Frise Gidaire ‚Üê ‚Üí Made with p6 and shaders In collaboration with Enguerrand de Smet and Aurore Lafaurie","keywords":"","version":"Next"},{"title":"√âchelle-chi t'en penches koi?","type":0,"sectionRef":"#","url":"/artworks/echelle","content":"√âchelle-chi t'en penches koi? ‚Üê ‚Üí Made with Coollab In collaboration with Enguerrand de Smet, Aurore Lafaurie and Ana√Øs Gougne","keywords":"","version":"Next"},{"title":"Procedural Planet","type":0,"sectionRef":"#","url":"/artworks/procedural-planet","content":"Procedural Planet A single fragment shader (available here), rendered using CoolLab Made in collaboration with Enguerrand de Smet during a live coding session on the E-Taverne We did put an emphasis on the rendering of the water. You can see reflections, refractions and light absorption.","keywords":"","version":"Next"},{"title":"MIPMAP !","type":0,"sectionRef":"#","url":"/artworks/mipmap","content":"MIPMAP ! ‚Üê ‚Üí Made with Coollab In collaboration with Enguerrand de Smet, and Aurore Lafaurie23hBD 2024","keywords":"","version":"Next"},{"title":"The flight of Icarus","type":0,"sectionRef":"#","url":"/artworks/the-flight-of-icarus","content":"The flight of Icarus Made with Processing","keywords":"","version":"Next"},{"title":"Sakura","type":0,"sectionRef":"#","url":"/artworks/sakura","content":"Sakura Made with Processing","keywords":"","version":"Next"},{"title":"Triangles","type":0,"sectionRef":"#","url":"/artworks/triangles","content":"Triangles Made with Processing","keywords":"","version":"Next"},{"title":"This is Walloween","type":0,"sectionRef":"#","url":"/artworks/this-is-walloween","content":"This is Walloween ‚Üê ‚Üí In collaboration with Enguerrand de Smet, Aurore Lafaurie, Flavie Enrico and Guillaume Tritsch 25hBD 2024","keywords":"","version":"Next"},{"title":"Acting","type":0,"sectionRef":"#","url":"/miscellaneous/acting","content":"","keywords":"","version":"Next"},{"title":"Le temps d'une histoire‚Äã","type":1,"pageTitle":"Acting","url":"/miscellaneous/acting#le-temps-dune-histoire","content":"  ","version":"Next","tagName":"h2"},{"title":"Happy Hour‚Äã","type":1,"pageTitle":"Acting","url":"/miscellaneous/acting#happy-hour","content":"  ","version":"Next","tagName":"h2"},{"title":"Wi & Sp","type":0,"sectionRef":"#","url":"/artworks/wi-sp","content":"Wi &amp; Sp ‚Üê ‚Üí Made with Blender In collaboration with Enguerrand de Smet and Aurore Lafaurie","keywords":"","version":"Next"},{"title":"Coollab","type":0,"sectionRef":"#","url":"/projects/coollab","content":"Coollab ‚ú® Generative visuals for everyone ‚ú® This is a pretty huge project that I have been working on for the past five years. While working on it I have also developed quite a few C++ librairies, as well as a bigger framework for this kind of VFX applications. https://coollab-art.com/ https://github.com/Coollab-Art/Coollab","keywords":"","version":"Next"},{"title":"Math Classes","type":0,"sectionRef":"#","url":"/miscellaneous/soutien-maths","content":"","keywords":"","version":"Next"},{"title":"S1‚Äã","type":1,"pageTitle":"Math Classes","url":"/miscellaneous/soutien-maths#s1","content":"","version":"Next","tagName":"h2"},{"title":"Fonctions‚Äã","type":1,"pageTitle":"Math Classes","url":"/miscellaneous/soutien-maths#fonctions","content":" ","version":"Next","tagName":"h3"},{"title":"D√©riv√©es‚Äã","type":1,"pageTitle":"Math Classes","url":"/miscellaneous/soutien-maths#d√©riv√©es","content":" ","version":"Next","tagName":"h3"},{"title":"D√©veloppements Limit√©s‚Äã","type":1,"pageTitle":"Math Classes","url":"/miscellaneous/soutien-maths#d√©veloppements-limit√©s","content":"  ","version":"Next","tagName":"h3"},{"title":"√âtudes de fonction‚Äã","type":1,"pageTitle":"Math Classes","url":"/miscellaneous/soutien-maths#√©tudes-de-fonction","content":" ","version":"Next","tagName":"h3"},{"title":"Int√©grales‚Äã","type":1,"pageTitle":"Math Classes","url":"/miscellaneous/soutien-maths#int√©grales","content":" ","version":"Next","tagName":"h3"},{"title":"S2‚Äã","type":1,"pageTitle":"Math Classes","url":"/miscellaneous/soutien-maths#s2","content":"","version":"Next","tagName":"h2"},{"title":"Fiche R√©cap‚Äã","type":1,"pageTitle":"Math Classes","url":"/miscellaneous/soutien-maths#fiche-r√©cap","content":" ","version":"Next","tagName":"h3"},{"title":"Espaces Vectoriels‚Äã","type":1,"pageTitle":"Math Classes","url":"/miscellaneous/soutien-maths#espaces-vectoriels","content":" ","version":"Next","tagName":"h3"},{"title":"Dimension‚Äã","type":1,"pageTitle":"Math Classes","url":"/miscellaneous/soutien-maths#dimension","content":" ","version":"Next","tagName":"h3"},{"title":"Matrices‚Äã","type":1,"pageTitle":"Math Classes","url":"/miscellaneous/soutien-maths#matrices","content":" ","version":"Next","tagName":"h3"},{"title":"D√©terminant‚Äã","type":1,"pageTitle":"Math Classes","url":"/miscellaneous/soutien-maths#d√©terminant","content":" ","version":"Next","tagName":"h3"},{"title":"Diagonalisation‚Äã","type":1,"pageTitle":"Math Classes","url":"/miscellaneous/soutien-maths#diagonalisation","content":" ","version":"Next","tagName":"h3"},{"title":"Django","type":0,"sectionRef":"#","url":"/projects/django","content":"Django https://github.com/JulesFouchy/Django Django is a VJing app based on a particle system. You can play with many settings and shapes, record yourself and export HD videos. It is my first big project, took me a year. ","keywords":"","version":"Next"},{"title":"Imacubes","type":0,"sectionRef":"#","url":"/projects/imacubes","content":"Imacubes https://github.com/JulesFouchy/IMACUBES/ Imacubes is a voxel editor offering a few tools and procedural terrain generation, supporting custom shaders, shadows and ambient occlusion. Here are a few images I made with it:","keywords":"","version":"Next"},{"title":"Mirrors, Lasers & Robots","type":0,"sectionRef":"#","url":"/projects/mirrors-lasers-robots","content":"Mirrors, Lasers &amp; Robots https://github.com/guillaume-haerinck/imac-tower-defense Mirrors, Lasers &amp; Robots is a tower defense game based on redirecting lasers through mirrors. It was a school project developed as two.","keywords":"","version":"Next"},{"title":"p6","type":0,"sectionRef":"#","url":"/projects/p6","content":"p6 p6 is a simple-to-use library for 2D drawing in C++. Is is strongely inspired by Processing / p5.js.","keywords":"","version":"Next"},{"title":"Tangram","type":0,"sectionRef":"#","url":"/projects/tangram","content":"Tangram https://github.com/JulesFouchy/Tangram2 Tangram is a 2D image software mainly focused on the possibility to write your own fragment shaders (in a Shadertoy-like fashion). Here are of few images I made using Tangram: Playing around with ray marching:","keywords":"","version":"Next"},{"title":"Word It!","type":0,"sectionRef":"#","url":"/projects/Word It","content":"Word It! A mobile game made with Godot, where you need to form words with the falling letters Download it on the Play Store","keywords":"","version":"Next"}],"options":{"id":"default"}}